{"version":3,"sources":["logo.svg","views/countryCard/countryCard.js","Config.js","components/countries/Countries.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countryCard","props","className","src","imgSrc","alt","name","population","buttonText","CONFIG","Countries","state","_initCountries","_loadMoreCountries","context","fetch","api","then","resp","json","data","setState","allCountries","visibleCountries","slice","countriesVisibleOnLoad","catch","error","console","countryListError","log","this","map","country","index","Fragment","key","flag","callback","onClick","React","Component","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,wSCgB5BC,MAZf,SAAsBC,GAErB,OACC,yBAAKC,UAAW,gBACf,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,iBAC5B,4BAAKJ,EAAMK,MACX,mDAAyBL,EAAMM,YAC/B,4BAAQL,UAAU,0BAA0BD,EAAMO,cCRtCC,EAHA,CACd,IAAQ,wCC2DMC,E,YAvDd,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZ,aAAiB,GACjB,iBAAqB,GACrB,uBAA0B,EAC1B,kBAAqB,EACrB,QAAY,GAEb,EAAKC,eAAL,gBACA,EAAKC,mBAAL,gBAVa,E,4EAYCC,GACdC,MAAMN,EAAOO,KAAKC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAAQF,MAAK,SAASG,GAC3DN,EAAQO,UAAS,SAACV,GAAD,MAAY,CAC5BW,aAAcF,EACdG,iBAAkBH,EAAKI,MAAM,EAAEb,EAAMc,+BAItCC,OAAM,SAASC,GACfC,QAAQD,MAAMA,GACdb,EAAQO,UAAS,SAACV,GAAD,MAAY,CAACkB,kBAAkB,W,yCAG9BlB,GAInBiB,QAAQE,IAAI,a,+BAIZ,OADAF,QAAQE,IAAIC,KAAKpB,MAAMW,aAAa,IAEnC,6BAASpB,UAAU,aAClB,yBAAKA,UAAU,eACd6B,KAAKpB,MAAMY,iBAAiBS,KAAI,SAACC,EAAQC,GACzC,OAAO,kBAAC,IAAMC,SAAP,CAAgBC,IAAMF,GAC3BlC,EAAY,CACbI,OAAO6B,EAAQI,KACT/B,KAAM2B,EAAQ3B,KACdC,WAAa0B,EAAQ1B,WACrBC,WAAa,OACb8B,SAAW,YAMnB,4BAAQpC,UAAU,wBAAwBqC,QAASR,KAAKlB,oBAAxD,mB,GAlDoB2B,IAAMC,WCYfC,MAXf,WACE,OACE,yBAAKxC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKwC,IAAMzC,UAAU,gBAAgBG,IAAI,UAEhD,kBAAC,EAAD,QCCcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM+B,c","file":"static/js/main.950545b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './countryCard.css';\r\nimport '../../styles/general.css';\r\n\r\nfunction countryCard (props){\r\n\r\n\treturn (\r\n\t\t<div className= \"country-card\">\r\n\t\t\t<img src={props.imgSrc} alt=\"country-Flag\"></img>\r\n\t\t\t<h4>{props.name}</h4>\r\n\t\t\t<p>Current Population : {props.population}</p>\r\n\t\t\t<button className=\"button button--primary\">{props.buttonText}</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default countryCard","const CONFIG = {\r\n\t'api' : \"https://restcountries.eu/rest/v2/all\"\r\n}\r\nexport default CONFIG;","import React from 'react';\r\nimport './countries.css'\r\nimport countryCard from '../../views/countryCard/countryCard';\r\nimport CONFIG from '../../Config';\r\nclass Countries extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\t\"allCountries\" : [],\r\n\t\t\t\"visibleCountries\" : [],\r\n\t\t\t\"countriesVisibleOnLoad\": 6,\r\n\t\t\t\"countryListError\" : false,\r\n\t\t\t\"counter\" : 0,\r\n\t\t}\r\n\t\tthis._initCountries(this);\r\n\t\tthis._loadMoreCountries(this);\r\n\t}\r\n\t_initCountries(context){\r\n\t\tfetch(CONFIG.api).then((resp) => resp.json()).then(function(data) {\r\n\t\t\tcontext.setState((state) => ({\r\n\t\t\t\tallCountries: data,\r\n\t\t\t\tvisibleCountries: data.slice(0,state.countriesVisibleOnLoad)\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t})\r\n\t\t.catch(function(error){\r\n\t\t\tconsole.error(error);\r\n\t\t\tcontext.setState((state) => ({countryListError: true}));\r\n\t\t})\r\n\t}\r\n\t _loadMoreCountries(state) {\r\n\t\t// context.setState((state)=>({\r\n\t\t// \tvisibleCountries: [...state.allCountries]\r\n\t\t// }));\r\n\t\tconsole.log(\"clicked\");\r\n\t}\r\n\trender(){\r\n\t\tconsole.log(this.state.allCountries[0]);\r\n\t\treturn (\r\n\t\t\t<section className=\"countries\">\r\n\t\t\t\t<div className=\"countryList\">\r\n\t\t\t\t{this.state.visibleCountries.map((country,index) => {\r\n\t\t\t\t\treturn <React.Fragment key ={index}>\r\n\t\t\t\t\t\t{countryCard({\r\n\t\t\t\t\t\timgSrc:country.flag,\r\n\t\t\t        \tname: country.name,\r\n\t\t\t        \tpopulation : country.population,\r\n\t\t\t        \tbuttonText : \"View\",\r\n\t\t\t        \tcallback : null\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t \r\n\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"button loadMoreButton\" onClick={this._loadMoreCountries}>Load More!</button>\r\n\t\t\t</section>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Countries;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Countries from './components/countries/Countries.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo spin\" alt=\"logo\" />\r\n      </header>\r\n      <Countries />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}