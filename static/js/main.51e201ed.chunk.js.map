{"version":3,"sources":["logo.svg","views/countryCard/countryCard.js","components/countries/Countries.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","countryCard","props","className","src","imgSrc","alt","name","population","onClick","callback","buttonText","Countries","state","allCountries","countryListError","_initCountries","bind","this","setState","console","log","e","React","Component","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,wSCgB5BC,MAZf,SAAsBC,GAErB,OACC,yBAAKC,UAAW,gBACf,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,iBAC5B,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,YACV,4BAAQC,QAASP,EAAMQ,SAAUP,UAAU,0BAA0BD,EAAMS,cC8B/DC,E,YApCd,WAAYV,GAAQ,IAAD,8BAClB,4CAAMA,KACDW,MAAQ,CACZC,aAAe,GACfC,kBAAmB,GAEpB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANJ,E,8EAUlBC,KAAKC,SAAS,CAACL,aAAc,CAAC,MAAO,SACrCM,QAAQC,IAAI,QAASH,KAAKL,MAAMC,gB,+BAQxB,IAAD,OAEP,OACC,6BAASX,UAAU,YAAYM,QAAS,SAACa,GAAD,OAAO,EAAKN,mBAE5Cf,EAAY,CACZI,OAAO,gCACPE,KAAM,UACNC,WAAa,GACbG,WAAa,WACbD,SAAW,Y,GA9BEa,IAAMC,WCafC,MAZf,WACE,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKsB,IAAMvB,UAAU,gBAAgBG,IAAI,SAC9C,kBAAC,EAAD,SCEYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.51e201ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport countryCardCss from './countryCard.css';\r\nimport button from '../../styles/general.css';\r\n\r\nfunction countryCard (props){\r\n\r\n\treturn (\r\n\t\t<div className= \"country-card\">\r\n\t\t\t<img src={props.imgSrc} alt=\"country-Flag\"></img>\r\n\t\t\t<h4>{props.name}</h4>\r\n\t\t\t<p>{props.population}</p>\r\n\t\t\t<button onClick={props.callback} className=\"button button--primary\">{props.buttonText}</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default countryCard","import React from 'react';\r\nimport './countries.css'\r\nimport countryCard from '../../views/countryCard/countryCard';\r\nimport CONFIG from '../../Config';\r\nclass Countries extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tallCountries : [],\r\n\t\t\tcountryListError : false\r\n\t\t}\r\n\t\tthis._initCountries = this._initCountries.bind(this);\r\n\t\t// this._initCountries();\r\n\t}\r\n\t_initCountries(){\r\n\t\tthis.setState({allCountries: ['123', '567']})\r\n\t\tconsole.log(\"kewal\", this.state.allCountries)\r\n\t\t// fetch(CONFIG.api).then((resp) => resp.json()).then(function(data) {\r\n\t\t// \tthis.setState({allCountries: data})\r\n\t\t// }).catch(function(error){\r\n\t\t// \tconsole.error(error);\r\n\t\t// \tthis.setState({countryListError: true});\r\n\t\t// })\r\n\t}\r\n\trender(){\r\n\t\t\t// console.log(this.state.allCountries);\r\n\t\treturn (\r\n\t\t\t<section className=\"countries\" onClick={(e) => this._initCountries()}>\r\n\r\n\t\t        {countryCard({\r\n\t\t        \timgSrc:\"https://picsum.photos/300/300\",\r\n\t\t        \tname: \"country\",\r\n\t\t        \tpopulation : 23,\r\n\t\t        \tbuttonText : \"Click Me\",\r\n\t\t        \tcallback : null\r\n\t\t        })}\r\n\t\t\t</section>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Countries;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Countries from './components/countries/Countries.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo spin\" alt=\"logo\" />\n        <Countries />\n      </header>\n      {/*<main>sdfsf</main>*/}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}